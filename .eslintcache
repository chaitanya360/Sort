[{"D:\\Projects\\React - w3schools\\myfirstreact\\src\\index.js":"1","D:\\Projects\\React - w3schools\\myfirstreact\\src\\AlgoRhytm\\Searching\\ArrayAppIndex.js":"2","D:\\Projects\\React - w3schools\\myfirstreact\\src\\Test\\index.js":"3","D:\\Projects\\React - w3schools\\myfirstreact\\src\\AlgoRhytm\\Sorting\\SortingIndex.js":"4","D:\\Projects\\React - w3schools\\myfirstreact\\src\\AlgoRhytm\\Searching\\WorkArea.jsx":"5","D:\\Projects\\React - w3schools\\myfirstreact\\src\\AlgoRhytm\\Sorting\\MainArea.js":"6","D:\\Projects\\React - w3schools\\myfirstreact\\src\\AlgoRhytm\\Sorting\\BarsContainer.jsx":"7","D:\\Projects\\React - w3schools\\myfirstreact\\src\\AlgoRhytm\\Searching\\Array.jsx":"8"},{"size":260,"mtime":1621588830331,"results":"9","hashOfConfig":"10"},{"size":180,"mtime":1609047419689,"results":"11","hashOfConfig":"10"},{"size":673,"mtime":1609132219039,"results":"12","hashOfConfig":"10"},{"size":156,"mtime":1609137064825,"results":"13","hashOfConfig":"10"},{"size":9727,"mtime":1621588822146,"results":"14","hashOfConfig":"10"},{"size":3458,"mtime":1609255648332,"results":"15","hashOfConfig":"10"},{"size":1819,"mtime":1621588879105,"results":"16","hashOfConfig":"10"},{"size":3338,"mtime":1609256770475,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"13xt379",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"D:\\Projects\\React - w3schools\\myfirstreact\\src\\index.js",[],["37","38"],"D:\\Projects\\React - w3schools\\myfirstreact\\src\\AlgoRhytm\\Searching\\ArrayAppIndex.js",[],["39","40"],"D:\\Projects\\React - w3schools\\myfirstreact\\src\\Test\\index.js",[],"D:\\Projects\\React - w3schools\\myfirstreact\\src\\AlgoRhytm\\Sorting\\SortingIndex.js",[],"D:\\Projects\\React - w3schools\\myfirstreact\\src\\AlgoRhytm\\Searching\\WorkArea.jsx",["41","42","43"],"import React, { Component } from \"react\";\r\nimport Array from \"./Array\";\r\n\r\nclass WorkArea extends Component {\r\n  state = {\r\n    array: [],\r\n    searchKey: 0,\r\n    searchBoxStyle: \"\",\r\n    keyFound: false,\r\n    searching: false,\r\n    shouldDisplayResult: false,\r\n    arraySize: 0,\r\n    intervalTime: 5,\r\n    stopTime: 2000,\r\n    isBinarySearch: false, //make it false for linear search\r\n    isSorted: false,\r\n    middleInBinary: 0, //mid\r\n  };\r\n\r\n  handleArrayValuechange = (e) => {\r\n    this.resetArrayStyle();\r\n    const arrayConst = this.state.array.map((element) => {\r\n      if (element.index === parseInt(e.target.name)) {\r\n        if (e.target.value === \"\") element.value = 0;\r\n        //need to fix this : when the number starts from '0';\r\n        else element.value = parseInt(e.target.value, 10);\r\n      }\r\n      return element;\r\n    });\r\n\r\n    this.setState({ array: arrayConst });\r\n  };\r\n\r\n  handleArraySizeValuechange = (e) => {\r\n    let size = e.target.value;\r\n    if (size == \"\") size = \"\";\r\n    else size = parseInt(size);\r\n    this.resetArrayStyle();\r\n    this.setState({ arraySize: size });\r\n  };\r\n\r\n  handleSearchValuechange = (e) => {\r\n    let tempSearchKey;\r\n\r\n    if (e.target.value === \"\") tempSearchKey = \"\";\r\n    //need to fix this : when the number starts from '0';\r\n    else tempSearchKey = parseInt(e.target.value, 10);\r\n    this.setState({ searchKey: tempSearchKey });\r\n    this.resetArrayStyle();\r\n  };\r\n\r\n  handlegenerateButtonPlaced = () => {\r\n    let i = 0;\r\n    this.resetArrayStyle();\r\n\r\n    if (this.state.arraySize < 1) alert(\"We Dont't Do That Here!\");\r\n    //this will set different speeds for differet array sizes\r\n    else if (this.state.arraySize <= 100) this.setState({ intervalTime: 50 });\r\n    else if (this.state.arraySize < 500) this.setState({ intervalTime: 20 });\r\n    else this.setState({ intervalTime: 5 });\r\n\r\n    let arrayClone = [];\r\n    for (i = 0; i < this.state.arraySize; i++) {\r\n      arrayClone.push({\r\n        index: i,\r\n        value: \"\",\r\n        customClass: \"\",\r\n      });\r\n    }\r\n\r\n    this.setState({ array: arrayClone, isSorted: false });\r\n  };\r\n\r\n  handleSortButtonPressed = () => {\r\n    if (this.state.array[0].value != \"\") {\r\n      let tempArray = [...this.state.array];\r\n      this.resetArrayStyle();\r\n      tempArray.sort(function (a, b) {\r\n        return a.value - b.value;\r\n      });\r\n      this.setState({ array: tempArray, isSorted: true });\r\n    } else {\r\n      alert(\"Fill it first\");\r\n    }\r\n  };\r\n\r\n  handlefillrandomButtonPressed = () => {\r\n    this.resetArrayStyle();\r\n    let i = 0;\r\n    let arrayClone = [];\r\n    let a = 0;\r\n    let b = 100;\r\n    for (i = 0; i < this.state.arraySize; i++) {\r\n      arrayClone.push({\r\n        index: i,\r\n        value: parseInt(Math.random() * (b - a) + a),\r\n        customClass: \"\",\r\n      });\r\n    }\r\n    this.setState({ array: arrayClone, isSorted: false });\r\n  };\r\n\r\n  handleonSearchkeypressed = () => {\r\n    let i = 0;\r\n    let intervalTime = this.state.intervalTime;\r\n    this.resetArrayStyle();\r\n\r\n    if (this.state.array.length > 0) {\r\n      //For Linear Search\r\n      if (!this.state.isBinarySearch) {\r\n        this.setState({\r\n          searchBoxStyle: \"searchBoxOnSearchActive\",\r\n          searching: true,\r\n        });\r\n        var intervalId = setInterval(\r\n          () => this.linearSearch(i++, intervalId),\r\n          intervalTime\r\n        );\r\n      }\r\n      //For Binanry Search\r\n      else {\r\n        //check for sorted\r\n        if (!this.state.isSorted) {\r\n          alert(\"Sort it first dude!\");\r\n        } else {\r\n          this.setState({\r\n            searchBoxStyle: \"searchBoxOnSearchActive\",\r\n            searching: true,\r\n          });\r\n          this.binarySearch(this.state.searchKey);\r\n        }\r\n      }\r\n    } else {\r\n      alert(\"Generate It before Searching\");\r\n    }\r\n    i = 0;\r\n  };\r\n\r\n  linearSearch = (i, intervalId) => {\r\n    let tempArray = [...this.state.array];\r\n    // if (i > 0) tempArray[i - 1].customClass = \"\"; //to make previous element reset style\r\n    this.setState({ array: tempArray });\r\n\r\n    //When found\r\n    if (this.state.array[i].value === this.state.searchKey) {\r\n      tempArray[i].customClass = \"SearchKeyFound\";\r\n      this.setState({\r\n        array: tempArray,\r\n        keyFound: true,\r\n        searching: false,\r\n        shouldDisplayResult: true,\r\n      });\r\n      clearInterval(intervalId);\r\n      // setTimeout(this.resetArrayStyle, this.state.stopTime);\r\n      return;\r\n    } else {\r\n      tempArray[i].customClass = \"searchKeyCheckedAndNotFound\"; //when checked and not equal\r\n      this.setState({ array: tempArray });\r\n    }\r\n\r\n    //Not found\r\n    if (i === this.state.array.length - 1) {\r\n      clearInterval(intervalId);\r\n      this.setState({\r\n        keyFound: false,\r\n        searching: false,\r\n        shouldDisplayResult: true,\r\n        searchBoxStyle: \"searchKeyCheckedAndNotFound\",\r\n      });\r\n      // setTimeout(this.resetArrayStyle, this.state.stopTime);\r\n    }\r\n  };\r\n\r\n  binarySearch = (key) => {\r\n    let sortedArray = [...this.state.array];\r\n    let start = 0;\r\n    let i = 0;\r\n    let end = sortedArray.length - 1;\r\n    this.setState({\r\n      middleInBinary: sortedArray[Math.floor((start + end) / 2)].value,\r\n      array: sortedArray,\r\n    });\r\n\r\n    let intervalid = setInterval(() => {\r\n      {\r\n        if (!(start <= end)) {\r\n          clearInterval(intervalid);\r\n          this.setState({\r\n            searching: false,\r\n            shouldDisplayResult: true,\r\n            keyFound: false,\r\n          });\r\n          return;\r\n        }\r\n\r\n        let middle = Math.floor((start + end) / 2);\r\n        sortedArray[middle].customClass = \"binarymiddle\";\r\n        this.setState({\r\n          middleInBinary: sortedArray[middle].value,\r\n          array: sortedArray,\r\n        });\r\n        if (sortedArray[middle].value === key) {\r\n          // found the key\r\n          sortedArray[middle].customClass = \"binarySearchMiddle\";\r\n          this.setState({\r\n            keyFound: true,\r\n            array: sortedArray,\r\n            searching: false,\r\n            shouldDisplayResult: true,\r\n          });\r\n          clearInterval(intervalid);\r\n          return;\r\n        } else if (sortedArray[middle].value < key) {\r\n          // continue searching to the right\r\n          for (i = start; i <= end; i++) {\r\n            if (i <= middle) sortedArray[i].customClass = \"binarySearchWaste\";\r\n            else sortedArray[i].customClass = \"binarySearchUse\";\r\n          }\r\n          sortedArray[middle].customClass = \"binarymiddle\";\r\n          this.setState({ array: sortedArray });\r\n          sortedArray[middle].customClass = \"binarySearchWaste\";\r\n          start = middle + 1;\r\n        } else {\r\n          // search searching to the left\r\n          for (i = start; i <= end; i++) {\r\n            if (i >= middle) sortedArray[i].customClass = \"binarySearchWaste\";\r\n            else sortedArray[i].customClass = \"binarySearchUse\";\r\n          }\r\n          sortedArray[middle].customClass = \"binarymiddle\";\r\n          this.setState({ array: sortedArray });\r\n          sortedArray[middle].customClass = \"binarySearchWaste\";\r\n          end = middle - 1;\r\n        }\r\n        if (!this.state.searching) {\r\n          this.setState({\r\n            keyFound: false,\r\n            searching: false,\r\n            shouldDisplayResult: true,\r\n            searchBoxStyle: \"searchKeyCheckedAndNotFound\",\r\n          });\r\n        }\r\n      }\r\n    }, this.state.stopTime);\r\n  };\r\n\r\n  ShowComparisation = () => {\r\n    let compareresult = \"\";\r\n    let customClass = \"\";\r\n    if (this.state.searchKey < this.state.middleInBinary) {\r\n      compareresult = \"<\";\r\n      customClass = \"searchKeyisSmall\";\r\n    } else if (this.state.searchKey > this.state.middleInBinary) {\r\n      compareresult = \">\";\r\n      customClass = \"\";\r\n      customClass = \"searchKeyisLarge\";\r\n    } else compareresult = \"=\";\r\n\r\n    if (this.state.isBinarySearch && this.state.searching) {\r\n      return (\r\n        <React.Fragment>\r\n          <span\r\n            className={\r\n              \"binary_compare arrayBox searchBox m-2 \" +\r\n              this.state.searchBoxStyle\r\n            }\r\n          >\r\n            <span className={customClass}>{this.state.searchKey}</span>\r\n\r\n            <span className={customClass}>{\" \" + compareresult + \" \"}</span>\r\n\r\n            <span className=\"binarymiddle\">{this.state.middleInBinary}</span>\r\n          </span>\r\n        </React.Fragment>\r\n      );\r\n    } else return \"\";\r\n  };\r\n\r\n  //this function will set array style to \"\"\r\n  resetArrayStyle = () => {\r\n    const tempArray = this.state.array.map((e) => {\r\n      e.customClass = \"\";\r\n      return e;\r\n    });\r\n\r\n    this.setState({\r\n      array: tempArray,\r\n      searchBoxStyle: \"\",\r\n      searching: false,\r\n      shouldDisplayResult: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Array\r\n          array={this.state.array}\r\n          searchKey={this.state.searchKey}\r\n          onArrayValueChange={this.handleArrayValuechange}\r\n          onhandleSearchValuechange={this.handleSearchValuechange}\r\n          onSearchkeypressed={this.handleonSearchkeypressed}\r\n          searchBoxStyle={this.state.searchBoxStyle}\r\n          keyFound={this.state.keyFound}\r\n          searching={this.state.searching}\r\n          shouldDisplayResult={this.state.shouldDisplayResult}\r\n          arraySize={this.state.arraySize}\r\n          onhandleArraySizeValuechange={this.handleArraySizeValuechange}\r\n          generateButtonPlaced={this.handlegenerateButtonPlaced}\r\n          onfillrandomButtonPressed={this.handlefillrandomButtonPressed}\r\n          onSortButtonPressed={this.handleSortButtonPressed}\r\n          showComparisation={this.state.showComparisation}\r\n        >\r\n          <this.ShowComparisation />\r\n        </Array>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WorkArea;\r\n","D:\\Projects\\React - w3schools\\myfirstreact\\src\\AlgoRhytm\\Sorting\\MainArea.js",[],"D:\\Projects\\React - w3schools\\myfirstreact\\src\\AlgoRhytm\\Sorting\\BarsContainer.jsx",[],"D:\\Projects\\React - w3schools\\myfirstreact\\src\\AlgoRhytm\\Searching\\Array.jsx",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"44","replacedBy":"48"},{"ruleId":"46","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":36,"column":14,"nodeType":"52","messageId":"53","endLine":36,"endColumn":16},{"ruleId":"50","severity":1,"message":"54","line":75,"column":35,"nodeType":"52","messageId":"53","endLine":75,"endColumn":37},{"ruleId":"55","severity":1,"message":"56","line":185,"column":7,"nodeType":"57","messageId":"58","endLine":242,"endColumn":8},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],["59"],["60"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation"]